
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rajiv
 */
public class process extends javax.swing.JFrame {

    /**
     * Creates new form process
     */
    public process() {
        initComponents();
        this.getContentPane().setBackground(Color.black);
        this.setSize(1000, 419);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Energy"
            }
        ));
        jScrollPane1.setViewportView(tb1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 80, 320, 170));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Sequence of execution: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 40, 230, 30));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Add new user");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 280, 180, 40));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Start next batch");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 280, -1, 40));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("Power Consumption is lowest");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 340, 310, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dishwasher.PNG"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents
String names[]=new String[4];
double energies[]=new double[4];

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
String[] rr_id=new String[50];
double[] rr_e=new double[50];
String[] sjf_id=new String[4];
double[] sjf_e=new double[4];
int counter=0;
String url = "jdbc:sqlite:C:\\Rajiv\\SQL\\Sqlite\\dishwasher.db";
Connection conn = null;
try {
    conn = DriverManager.getConnection(url);
    }
catch (SQLException e) {
    System.out.println(e.getMessage());
    }
String get="select * from processes limit 4;";
try
{
    int count=0;
    Statement stmt  = conn.createStatement();
    ResultSet rs    = stmt.executeQuery(get);
    while(rs.next())
    {
        String id=rs.getString("ID");
        if(id!=null)
        {
            counter++;
            names[count]=id;
        }
        double energy=rs.getDouble("Energy");
        if(energy!=0.0)
        energies[count]=energy;
        count++;
        if(count>3)
        {
            break;
        }
    }
}
catch(SQLException e)
{
    System.out.println(e.getMessage());
}
String jnames="";
for(int i =0;i<names.length;i++)
{
    if(names[i]!=null)
        jnames=jnames+names[i]+"'s ,";
}
JOptionPane.showMessageDialog(null,""+jnames+" dishes are getting washed! Others have been put in waiting queue.");
int n = names.length;
double ct[] = new double[n]; 
double ta[] = new double[n]; 
double wt[] = new double[n];  
double f[] = new double[n]; 
int st=0, tot=0;
int dis=0;
float avgwt=0, avgta=0;
boolean a = true;
while(true)
{
    int c=n;
    double min=3000;
    if (tot == n) 
        break;

    for (int i=0; i<n; i++)
    {
        if ((f[i] == 0) && (energies[i]<min))
            {
                min=energies[i];
                c=i;
            }
    }
    if (c==n) 
        st++;
    else
    {
        ct[c]=st+energies[c];
        st+=energies[c];
        ta[c]=ct[c];
        wt[c]=ta[c]-energies[c];
        f[c]=1;
        sjf_id[dis]=names[c];
        sjf_e[dis]=energies[c];
        dis++;
        tot++;
    }
}
for(int i=0;i<n;i++)
{
        avgwt+= wt[i];
        avgta+= ta[i];

}
double sjf_fin_avgtat=(double)(avgta/n);
double sjf_fin_avgwt=(double)(avgwt/n);
//rr
n=names.length;
double total_wt=0;
double total_tat=0;
double tat[]= new double[n];
int j;
double quantum=550;

double rem_bt[] = new double[n]; 
    for (int i = 0 ; i < n ; i++) 
        rem_bt[i] = energies[i];
double t = 0;
while(true) 
 { 
    boolean done = true;
     for (int i = 0 ; i < n; i++) 
     {
         if (rem_bt[i] > 0) 
         { 
             done = false;  

             if (rem_bt[i] > quantum) 
             { 
                 t += quantum; 
                 //System.out.println(names[i]);
                 rr_id[i]=names[i];
                 rr_e[i]=quantum;
                 rem_bt[i] -= quantum; 
             } 
             else
             {  
                 t = t + rem_bt[i]; 
                 //System.out.println(names[i]);
                 rr_id[i]=names[i];
                 rr_e[i]=rem_bt[i]; 
                 wt[i] = t - energies[i]; 
                 rem_bt[i] = 0; 
             } 
         } 
     }  
    if (done == true) 
        break; 
    }   
for (int i=0; i<n; i++) 
    {
        tat[i] = energies[i] + wt[i]; 

    } 

for (int i=0; i<n; i++) 
{
    total_wt = total_wt + wt[i];
    total_tat = total_tat + tat[i];
}
double rr_avg_wt=(double)total_wt / (double)n;
double rr_avg_tat=(double)total_tat / (double)n;
System.out.println(counter);
if(counter==1 || counter==0)
{
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    Object[] row={names[0],energies[0]};
    model.addRow(row);
}

if(sjf_fin_avgtat<rr_avg_tat)
{
    
    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince SJF is more energy efficient, SJF will be implemented!");
   
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(names[i]!=null){
        Object[] row={sjf_id[i],sjf_e[i]};
        model.addRow(row);
    }}
}
else if(sjf_fin_avgtat>rr_avg_tat)
{
    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince RR is more energy efficient, RR will be implemented!");
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(names[i]!=null){
        Object[] row={rr_id[i],rr_e[i]};
        model.addRow(row);}
    }
}

String sql="delete from processes where id||energy in( select id||energy from processes limit 4);";
try
        {
            Statement stmt=conn.createStatement();
            stmt.executeUpdate(sql);
            conn.close();
        }
        catch (SQLException e)
        {
            System.out.println(e.getMessage());
        }
for(int i=0;i<4;i++)
{
    names[i]=null;
    energies[i]=0.0;
}
    }//GEN-LAST:event_formComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.dispose();
new login().setVisible(true);// TODO add your handling code here
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
String[] rr_id=new String[50];
double[] rr_e=new double[50];
String[] sjf_id=new String[4];
double[] sjf_e=new double[4];
int counter=0;
String url = "jdbc:sqlite:C:\\Rajiv\\SQL\\Sqlite\\dishwasher.db";
Connection conn = null;
try {
    conn = DriverManager.getConnection(url);
    }
catch (SQLException e) {
    System.out.println(e.getMessage());
    }
String get="select * from processes limit 4;";
try
{
    int count=0;
    Statement stmt  = conn.createStatement();
    ResultSet rs    = stmt.executeQuery(get);
    while(rs.next())
    {
        String id=rs.getString("ID");
        if(id!=null)
        {
            counter++;
            names[count]=id;
        }
        double energy=rs.getDouble("Energy");
        if(energy!=0.0)
        energies[count]=energy;
        count++;
        if(count>3)
        {
            break;
        }
    }
}
catch(SQLException e)
{
    System.out.println(e.getMessage());
}
String jnames="";
for(int i =0;i<names.length;i++)
{
    if(names[i]!=null)
        jnames=jnames+names[i]+"'s ,";
}
JOptionPane.showMessageDialog(null,""+jnames+" dishes are getting washed! Others have been put in waiting queue.");
int n = names.length;
double ct[] = new double[n]; 
double ta[] = new double[n]; 
double wt[] = new double[n];  
double f[] = new double[n]; 
int st=0, tot=0;
int dis=0;
float avgwt=0, avgta=0;
boolean a = true;
while(true)
{
    int c=n;
    double min=3000;
    if (tot == n) 
        break;

    for (int i=0; i<n; i++)
    {
        if ((f[i] == 0) && (energies[i]<min))
            {
                min=energies[i];
                c=i;
            }
    }
    if (c==n) 
        st++;
    else
    {
        ct[c]=st+energies[c];
        st+=energies[c];
        ta[c]=ct[c];
        wt[c]=ta[c]-energies[c];
        f[c]=1;
        sjf_id[dis]=names[c];
        sjf_e[dis]=energies[c];
        dis++;
        tot++;
    }
}
for(int i=0;i<n;i++)
{
        avgwt+= wt[i];
        avgta+= ta[i];

}
double sjf_fin_avgtat=(double)(avgta/n);
double sjf_fin_avgwt=(double)(avgwt/n);
//rr
n=names.length;
double total_wt=0;
double total_tat=0;
double tat[]= new double[n];
int j;
double quantum=550;

double rem_bt[] = new double[n]; 
    for (int i = 0 ; i < n ; i++) 
        rem_bt[i] = energies[i];
double t = 0;
while(true) 
 { 
    boolean done = true;
     for (int i = 0 ; i < n; i++) 
     {
         if (rem_bt[i] > 0) 
         { 
             done = false;  

             if (rem_bt[i] > quantum) 
             { 
                 t += quantum; 
                 rr_id[i]=names[i];
                 rr_e[i]=quantum;
                 rem_bt[i] -= quantum; 
             } 
             else
             {  
                 t = t + rem_bt[i];
                 rr_id[i]=names[i];
                 rr_e[i]=rem_bt[i]; 
                 wt[i] = t - energies[i]; 
                 rem_bt[i] = 0; 
             } 
         } 
     }  
    if (done == true) 
        break; 
    }   
for (int i=0; i<n; i++) 
    {
        tat[i] = energies[i] + wt[i]; 

    } 

for (int i=0; i<n; i++) 
{
    total_wt = total_wt + wt[i];
    total_tat = total_tat + tat[i];
}
double rr_avg_wt=(double)total_wt / (double)n; 
double rr_avg_tat=(double)total_tat / (double)n;
System.out.println(counter);
if(counter==1 || counter==0)
{
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    Object[] row={names[0],energies[0]};
    model.addRow(row);
}

if(sjf_fin_avgtat<rr_avg_tat)
{

    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince SJF is more energy efficient, SJF will be implemented!");

    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(sjf_id[i]!=null){
        Object[] row={sjf_id[i],sjf_e[i]};
        model.addRow(row);}
    }
}
else if(sjf_fin_avgtat>rr_avg_tat)
{
    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince RR is more energy efficient, RR will be implemented!");
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(names[i]!=null){
        Object[] row={rr_id[i],rr_e[i]};
        model.addRow(row);}
    }
}

String sql="delete from processes where id||energy in( select id||energy from processes limit 4);";
try
        {
            Statement stmt=conn.createStatement();
            stmt.executeUpdate(sql);
            conn.close();
        }
        catch (SQLException e)
        {
            System.out.println(e.getMessage());
        }
for(int i=0;i<4;i++)
{
    names[i]=null;
    energies[i]=0.0;
}
// TODO add your handling code here:
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
String[] rr_id=new String[50];
double[] rr_e=new double[50];
String[] sjf_id=new String[4];
double[] sjf_e=new double[4];
int counter=0;
String url = "jdbc:sqlite:C:\\Rajiv\\SQL\\Sqlite\\dishwasher.db";
Connection conn = null;
try {
    conn = DriverManager.getConnection(url);
    }
catch (SQLException e) {
    System.out.println(e.getMessage());
    }
String get="select * from waiting limit 4;";
try
{
    int count=0;
    Statement stmt  = conn.createStatement();
    ResultSet rs    = stmt.executeQuery(get);
    while(rs.next())
    {
        String id=rs.getString("ID");
        if(id!=null)
        {
            counter++;
            names[count]=id;
        }
        double energy=rs.getDouble("Energy");
        if(energy!=0.0)
        energies[count]=energy;
        count++;
        if(count>3)
        {
            break;
        }
    }
}
catch(SQLException e)
{
    System.out.println(e.getMessage());
}
String jnames="";
for(int i =0;i<names.length;i++)
{
    if(names[i]!=null)
        jnames=jnames+names[i]+"'s ,";
}
JOptionPane.showMessageDialog(null,""+jnames+" drums are getting washed! Others have been put in waiting queue.");
int n = names.length;
double ct[] = new double[n]; 
double ta[] = new double[n]; 
double wt[] = new double[n];  
double f[] = new double[n]; 
int st=0, tot=0;
int dis=0;
float avgwt=0, avgta=0;
boolean a = true;
while(true)
{
    int c=n;
    double min=3000;
    if (tot == n) 
        break;

    for (int i=0; i<n; i++)
    {
        if ((f[i] == 0) && (energies[i]<min))
            {
                min=energies[i];
                c=i;
            }
    }
    if (c==n) 
        st++;
    else
    {
        ct[c]=st+energies[c];
        st+=energies[c];
        ta[c]=ct[c];
        wt[c]=ta[c]-energies[c];
        f[c]=1;
        sjf_id[dis]=names[c];
        sjf_e[dis]=energies[c];
        dis++;
        tot++;
    }
}
for(int i=0;i<n;i++)
{
        avgwt+= wt[i];
        avgta+= ta[i];

}
double sjf_fin_avgtat=(double)(avgta/n);
double sjf_fin_avgwt=(double)(avgwt/n);
//rr
n=names.length;
double total_wt=0;
double total_tat=0;
double tat[]= new double[n];
int j;
double quantum=550;

double rem_bt[] = new double[n]; 
    for (int i = 0 ; i < n ; i++) 
        rem_bt[i] = energies[i];
double t = 0;
while(true) 
 { 
    boolean done = true;
     for (int i = 0 ; i < n; i++) 
     {
         if (rem_bt[i] > 0) 
         { 
             done = false;  

             if (rem_bt[i] > quantum) 
             { 
                 t += quantum; 
                 //System.out.println(names[i]);
                 rr_id[i]=names[i];
                 rr_e[i]=quantum;
                 rem_bt[i] -= quantum; 
             } 
             else
             {  
                 t = t + rem_bt[i]; 
                 //System.out.println(names[i]);
                 rr_id[i]=names[i];
                 rr_e[i]=rem_bt[i]; 
                 wt[i] = t - energies[i]; 
                 rem_bt[i] = 0; 
             } 
         } 
     }  
    if (done == true) 
        break; 
    }   
for (int i=0; i<n; i++) 
    {
        tat[i] = energies[i] + wt[i]; 

    } 

for (int i=0; i<n; i++) 
{
    total_wt = total_wt + wt[i];
    total_tat = total_tat + tat[i];
}
double rr_avg_wt=(double)total_wt / (double)n; 
                //System.out.println("Average waiting time = " +(float)total_wt / (float)n); 
		//System.out.println("Average turn around time = " +(float)total_tat / (float)n); 
double rr_avg_tat=(double)total_tat / (double)n;
System.out.println(counter);
if(counter==1 || counter==0)
{
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();//hi
    Object[] row={names[0],energies[0]};
    model.addRow(row);
}

if(sjf_fin_avgtat<rr_avg_tat)
{
   
    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince SJF is more energy efficient, SJF will be implemented!");
   
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(sjf_id[i]!=null){
        Object[] row={sjf_id[i],sjf_e[i]};
        model.addRow(row);}
    }
}
else if(sjf_fin_avgtat>rr_avg_tat)
{
    JOptionPane.showMessageDialog(null,"The turn around energy for sjf is "+sjf_fin_avgtat+"Watts\nThe turn around energy for rr is "+rr_avg_tat+"Watts\nSince RR is more energy efficient, RR will be implemented!");
    DefaultTableModel model = (DefaultTableModel) tb1.getModel();
    for(int i=0;i<names.length;i++)
    {
        if(sjf_id[i]!=null){
        Object[] row={rr_id[i],rr_e[i]};
        model.addRow(row);
    }}
}

String sql="delete from waiting where id||energy in( select id||energy from waiting limit 4);";
try
        {
            Statement stmt=conn.createStatement();
            stmt.executeUpdate(sql);
            conn.close();
        }
        catch (SQLException e)
        {
            System.out.println(e.getMessage());
        } 
for(int i=0;i<4;i++)
{
    names[i]=null;
    energies[i]=0.0;
}
// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(process.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(process.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(process.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(process.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new process().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb1;
    // End of variables declaration//GEN-END:variables
}
